<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Home</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <style>
        .chatbox{
            outline: 1px solid silver;
            min-height: 160px;
            padding: 0.5em;
        }

    </style>
</head>
<body>
<div class="container">
    <div class ="row">
        <div class = "col">
            <h1 class = "mt-3">EVA-01</h1>
        </div>
    </div>
    <div class="row">
        <div class="col-md-8">
            <h3>Chat</h3>

            <div class="form-group">
                <label for="username">Usuário</label>
                <input type="text" name="username" id="username" class="form-control" autocomplete="off" >
            </div>
            <div class="form-group" id="form">
                <label for="message">Mensagem</label>
                <input type="text" name="message" id="message" class="form-control" autocomplete="off" >
            </div>

            <hr>
            <a href="javascript:void(0);"class="btn btn-outline-secondary" id="sendBtn">Send Message</a>

            <input type="hidden" name="action" id="action">

            <div id = "status" class ="mt-2 float-end">
            </div>


            <div id = "output" class = "chatbox mt-3">

            </div>
        </div>
        <div class = "col-md-4">
            <h3>Usuários Online</h3>

            <ul id="usuarios_on"></ul>
        </div>
    </div>
</div>
</body>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
<script src="../static/reconnecting-websocket.min.js"></script>
<script>
    let socket = null;
    let o = document.getElementById("output");
    let userField = document.getElementById("username");
    let messageField = document.getElementById("message");

    window.onbeforeunload = function (){
        console.log("Saindo");
        let jsonDate = {};
        jsonDate["action"] = "left";
        socket.send(JSON.stringify(jsonDate));

    }
    //esperar toda a "página" carregar para realizar o upgrade
    document.addEventListener("DOMContentLoaded",function () {
        socket = new ReconnectingWebSocket("ws://192.168.2.132:8083/ws",null,{debug:true,reconnectInterval: 5000});

        const offline =`<span class ="badge bg-danger">Não conectado</span>`
        const online =`<span class ="badge bg-success">Conectado</span>`
        let statusDiv = document.getElementById("status");

        socket.onopen = () => {
            console.log("Conectado com sucesso");
            statusDiv.innerHTML = online;
        }
        socket.onclose = () => {
            console.log("Conexao fechada");
            statusDiv.innerHTML = offline;
        }
        socket.onerror = () => {
            console.log("Ocorreu um erro");
            statusDiv.innerHTML = offline;
        }
        socket.onmessage = msg => {
            //console.log(msg);
            //let j = JSON.parse(msg.data);
            //console.log(j);

            let data = JSON.parse(msg.data);
            console.log("Action is",data.action);
            switch (data.action){
                case "list_users":
                    let ul = document.getElementById("usuarios_on");
                    while(ul.firstChild) ul.removeChild(ul.firstChild);

                    if(data.connected_users.length > 0){
                        data.connected_users.forEach(function (item){
                            let li = document.createElement("li");
                            li.appendChild(document.createTextNode(item));
                            ul.appendChild(li);
                        })
                    }
                    break;
                case "broadcast":
                    o.innerHTML += (data.message + " <br>");
                    console.log(o.innerHTML);
            }
        }

        userField.addEventListener("change",function (){
            let jsonData = {};
            jsonData["action"] = "username";
            jsonData["username"] = this.value;
            jsonData["type"] = "web";
            console.log(JSON.stringify(jsonData))
            socket.send(JSON.stringify(jsonData));
        })
        messageField.addEventListener("keydown",function (event){
            if(event.code === "Enter"){
                if(!socket){
                    console.log("Sem conexao");
                    return false
                }
                if ((userField.value === "") || (messageField.value === "")){
                    alert("Preencha o usuario e a mensagem");
                    return false
                }else{
                    sendMessage()
                }
                event.preventDefault();
                event.stopPropagation();
            }
        })

        document.getElementById("sendBtn").addEventListener("click",function (){
            if ((userField.value === "") || (messageField.value === "")){
                alert("Preencha o usuario e a mensagem");
                return false
            }else{
                sendMessage()
            }
        })
    })

    function sendMessage(){
        let jsonData = {};
        jsonData["Action"] = "broadcast"
        jsonData["username"] = userField.value;
        jsonData["message"] = messageField.value;
        socket.send(JSON.stringify(jsonData))
        messageField.value = "";
    }
</script>
</html>